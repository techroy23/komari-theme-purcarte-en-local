name: Build and Release Assets

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn

      - name: Build project
        run: yarn build

      - name: Auto-increment version tag
        id: bump
        run: |
          git fetch --tags

          # Get latest tag or default to v0.0.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Strip 'v' prefix
          VERSION=${LATEST_TAG#v}

          # Split into X Y Z
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Increment patch
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"

          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

          # Create and push new tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Update theme configuration
        run: |
          VERSION=${NEW_VERSION}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

          jq --arg version "$VERSION" \
              '.version = $version' \
              komari-theme.json > komari-theme-updated.json

          mv komari-theme-updated.json komari-theme.json

          echo "Updated theme configuration:"
          cat komari-theme.json

      - name: Verify required files exist
        run: |
          echo "Checking required files..."
          ls -la preview.png || (echo "preview.png not found" && exit 1)
          ls -la komari-theme.json || (echo "komari-theme.json not found" && exit 1)
          ls -la dist/ || (echo "dist/ directory not found" && exit 1)
          echo "All required files found!"

      - name: Create theme package
        run: |
          mkdir -p theme-package
          cp preview.png theme-package/
          cp komari-theme.json theme-package/
          cp -r dist/ theme-package/
          ZIP_NAME="komari-theme-purcarte.zip"
          cd theme-package
          zip -r ../${ZIP_NAME} .
          cd ..
          echo "ZIP_NAME=${ZIP_NAME}" >> $GITHUB_ENV
          echo "Created package: ${ZIP_NAME}"
          ls -la ${ZIP_NAME}

      - name: Generate Changelog
        run: |
          git fetch --prune
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 `git rev-list --tags --skip=1 --max-count=1` 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "Previous tag: $PREVIOUS_TAG"
          CHANGELOG=$(git log $PREVIOUS_TAG..${NEW_TAG} --pretty=format:"* %s (%h)")
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Release ${{ env.NEW_TAG }}
          body: ${{ env.CHANGELOG }}
          draft: false
          prerelease: false
          files: ${{ env.ZIP_NAME }}
